# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type JwtPayload {
  access_token: String!
  user: userPayload!
}

input LoginInput {
  email: String!
  password: String
}

type Mutation {
  Login(login: LoginInput!): JwtPayload!
  createUser(data: UserCreateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  authorId: String
  content: String
  createdAt: DateTime!
  id: String!
  image: String
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  content
  createdAt
  id
  image
  published
  title
  updatedAt
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringNullableFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  image: StringNullableFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  profile: User!
  sayHello: String!
  user(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Sesion {
  createdAt: DateTime!
  id: String!
  state: Boolean!
  token: String!
  updatedAt: DateTime!
  userId: String
}

input SesionListRelationFilter {
  every: SesionWhereInput
  none: SesionWhereInput
  some: SesionWhereInput
}

input SesionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SesionOrderByWithRelationInput {
  User: UserOrderByWithRelationInput
  createdAt: SortOrder
  id: SortOrder
  state: SortOrder
  token: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum SesionScalarFieldEnum {
  createdAt
  id
  state
  token
  updatedAt
  userId
}

input SesionWhereInput {
  AND: [SesionWhereInput!]
  NOT: [SesionWhereInput!]
  OR: [SesionWhereInput!]
  User: UserRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  state: BoolFilter
  token: StringFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input SesionWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  createdAt: DateTime!
  email: String!
  id: String!
  image: String
  name: String
  password: String!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  sesions(cursor: SesionWhereUniqueInput, distinct: [SesionScalarFieldEnum!], orderBy: [SesionOrderByWithRelationInput!], skip: Int, take: Int, where: SesionWhereInput): [Sesion!]!
  updatedAt: DateTime!
}

type UserCount {
  posts: Int!
  sesions: Int!
}

input UserCreateInput {
  email: String!
  image: String
  name: String
  password: String!
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  sesions: SesionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  image
  name
  password
  updatedAt
}

input UserUpdateInput {
  email: String
  image: String
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  sesions: SesionListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type userPayload {
  email: String!
  sub: String!
}
